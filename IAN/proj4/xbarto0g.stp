global target_process, runtime_temp, inter_time, runtime, processes, last_print


probe begin
{
    target_process = @1
    last_print["time"] = gettimeofday_us()
}

# Fires whenever a new process or thread is successfully created
probe kprocess.create
{
    if (isinstr(execname(), target_process))
    {
        printf("PID %d created new process %d\n", pid(), new_pid)
    }
}

# Fires whenever a process attempts to exec to a new program
probe kprocess.exec
{
    if (isinstr(execname(), target_process))
    {
        printf("PID %d exec'ed \"%s\"\n", pid(), filename)
    }
}

# Process was interrupted
probe kernel.function("hrtimer_interrupt@kernel/time/hrtimer.c")
{
	if ([cpu(), pid()] in inter_time)
	{
		record_time(cpu(), pid(), "run")
		runtime_temp[cpu(), pid(), "inter_start"] = gettimeofday_us()
	}
}

# Process interruption ended
probe kernel.function("hrtimer_interrupt@kernel/time/hrtimer.c").return
{
	if ([cpu(), pid()] in inter_time)
	{
        record_time(cpu(), pid(), "inter")
		runtime_temp[cpu(), pid(), "start"] = gettimeofday_us()
	}
}

# Process is beginning execution on a cpu
probe scheduler.cpu_on
{
	if (isinstr(execname(), target_process))
    {
        runtime_temp[cpu(), pid(), "start"] = gettimeofday_us()
        runtime_temp[cpu(), pid(), "running"] = 1
        
        processes[cpu(), pid()] = execname()
        # Initialize the values, so they can be accessed later
        if (!([cpu(), pid()] in inter_time))
        {   
            runtime[cpu(), pid()] = 0
            inter_time[cpu(), pid()] = 0
        }
    }
}

# Process is about to stop running on a cpu
probe scheduler.cpu_off
{
    if (isinstr(execname(), target_process))
    {
        record_time(cpu(), pid(), "run")
        runtime_temp[cpu(), pid(), "running"] = 0
        runtime_temp[cpu(), pid(), "start"] = 0
    }
}

# Update the time of run/interruption of a given process
function record_time(_cpu, task, type)
{
    if (isinstr(type, "run"))
	    runtime[_cpu, task] += gettimeofday_us() - runtime_temp[_cpu, task, "start"]
    else
        inter_time[_cpu, task] += gettimeofday_us() - runtime_temp[_cpu, task, "inter_start"]

}

function print_stats()
{
    printf("~~~~~~~~~~~~~~~~~~~~\n")
    printf("CPU\tPID\trun\thrtimer\t\tcomm\n")
    foreach([_cpu, task, key] in runtime_temp+)
    {
        if (key != "start")
            continue

        if (runtime_temp[_cpu, task, "running"])
            record_time(_cpu, task, "run")

        run_percentage = (runtime[_cpu, task] * 100) / (gettimeofday_us() - last_print["time"])
        inter_percentage = (inter_time[_cpu, task] * 100) / (gettimeofday_us() - last_print["time"])

        if (runtime[_cpu, task] == 0 && inter_time[_cpu, task] == 0)
            continue

        if (inter_percentage >= 1)
            printf("%d\t%d\t%3d\t%5d\t%s\n", _cpu, task, run_percentage, inter_percentage, processes[_cpu, task])
        else
            printf("%d\t%d\t%3d\t%5d us\t%s\n", _cpu, task, run_percentage, inter_time[_cpu, task], processes[_cpu, task])

        runtime[_cpu, task] = 0
        inter_time[_cpu, task] = 0
    }
    printf("~~~~~~~~~~~~~~~~~~~~\n")
    last_print["time"] = gettimeofday_us()
}

probe timer.s(5)
{
    print_stats()
}

probe end
{
    print_stats()
}
